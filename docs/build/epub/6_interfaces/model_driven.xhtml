<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Model Driven Programmability</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="model-driven-programmability">
<h1>Model Driven Programmability</h1>
<p>Так что же это такое? Ведомая моделью программируемость? Теперь, после двух статей, нам хватит пары минут, чтобы разобраться что это такое.</p>
<p>Давайте вернёмся к <a class="reference external" href="https://adsm.readthedocs.io/ru/latest/4_lifecycle/index.html">4-й части АДСМ</a><span class="link-target"> [https://adsm.readthedocs.io/ru/latest/4_lifecycle/index.html]</span>, где я использовал позаимствованную у Дмитрия Тесля картинку.</p>
<blockquote>
<div><div class="figure align-default">
<img alt="https://dteslya.engineer/images/2020-10-netdevops-pipeline.png" src="https://dteslya.engineer/images/2020-10-netdevops-pipeline.png" />
</div>
<p><a class="reference external" href="https://dteslya.engineer/network_automaiton_101/">Источник: dteslya.engineer/network_automaiton_101</a><span class="link-target"> [https://dteslya.engineer/network_automaiton_101/]</span></p>
</div></blockquote>
<p>Она ведь очень понятная? Inventory, Git с шаблонами конфигурации, рендер, валидация, применение.</p>
<div class="line-block">
<div class="line">Где закопаны два мешка с человеко-неделями? Под шаблонами с генераторами и под системами применения конфигурации.</div>
<div class="line">Со вторым пытаются бороться NETCONF, RESTCONF, gNMI.</div>
<div class="line">А с первым - модели.</div>
</div>
<p>Проблема в том, что шаблоны мы составляем руками на основе изучения документации, интерфейса коробки и действуем методом проб и ошибок, вообще-то. Если нужна проверка типов, диапазонов, если меняется иерархия - будьте добры сами всё это написать и обработать. И, окончив, уехать в сумасшедший дом, учить друзей джинджа-программированию.</p>
<p>Model Driven меняет картину следующим образом:</p>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/5/model-driven.png" src="https://fs.linkmeup.ru/images/adsm/5/model-driven.png" style="width: 800px;" />
</div>
<p><em>Не могу найти, откуда брал эту картинку.</em></p>
</div></blockquote>
<div class="line-block">
<div class="line">Здесь шаблоны конфигурации заменяются на YANG-модель (в данном случае OpenConfig).</div>
<div class="line">Из инвентарки (топологии) и этих моделей рендерится конфиг, который с помощью RPC (тут gRPC) прогружается на коробку.</div>
</div>
<p>Model Driven означает тут, что мы</p>
<div class="line-block">
<div class="line">А) не думаем (или думаем меньше) про иерархию, типы данных. Перестаём мыслить тегами XML.</div>
<div class="line">Б) Модель определяет, как будет выглядеть конфигурация, как с ней работать.</div>
<div class="line">В) Использование точно такой же модели на устройстве гарантирует, что отправленное нами, будет принято и валидно на той стороне, коль скоро оно валидно на этой.</div>
</div>
<div class="line-block">
<div class="line">Иными словами именно модель управляет тем, как мы и железо будет работать с конфигурацией.</div>
<div class="line">Вот и вся суть.</div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>