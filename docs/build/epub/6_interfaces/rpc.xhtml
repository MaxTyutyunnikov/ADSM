<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Концепция RPC - Russian Pravoslavnaya Church</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="rpc-russian-pravoslavnaya-church">
<h1>Концепция RPC - Russian Pravoslavnaya Church</h1>
<div class="line-block">
<div class="line">RPC - клиент-серверный механизм, который позволяет запустить исполнение кода процедуры на другой машине так, словно бы он исполнялся локально. То есть разработчик просто привычным образом обращается к процедуре, не задумываясь о том, где и как она исполняется - главное, чтобы она ответ вернула.</div>
<div class="line">А программа уже сама реализует взаимодействие с удалённой машиной.</div>
<div class="line">Прелесть этого подхода в том, что он, во-первых, позволяет скрыть удалённый характер работы. А, во-вторых, на той, другой, стороне совершенно неважно, какая операционная система, архитектура, язык программирования и окружение - главное, чтобы они подчинялись одному протоколу.</div>
<div class="line">Например из-под винды в exe-шнике, написанном на Delphi, вы можете исполнить удалённую программу, написанную на го, запущенную на линуксе. И никто вам не сможет помешать!</div>
</div>
<div class="line-block">
<div class="line">Но что, по большому счёту, мы делаем, когда, зайдя по SSH, выполняем какую-то команду на коммутаторе или маршрутизаторе? Запускаем определённый код.</div>
<div class="line">Например, сообщаем подсистеме BGP, что нужно теперь пробовать установить соединение с новым пиром.</div>
</div>
<p>Но только представьте, как было бы восхитительно, если бы для вызова этого кода, не нужно было заходить на железку по SSH и вбивать команду?!</p>
<p>Постойте! Да ведь именно об этом мы и говорим в данном разделе.
| Большую оставшуюся часть статьи мы посвятим именно RPC.</p>
<div class="section" id="id1">
<h2>Пример</h2>
<div class="line-block">
<div class="line">Абстрактно взаимодействие с сетевым оборудованием выглядеть может примерно так.</div>
<div class="line">Для начала мы определяем спецификацию - это некий контракт, который гарантирует, что у клиента и сервера одинаковое понимание процедуры: имя, параметры, типы данных итд.</div>
</div>
<ol class="arabic simple">
<li><p>Наша убер-платформа автоматизации вызывает некую функцию <code class="docutils literal notranslate"><span class="pre">add_bgp_peer_stub(ip=&quot;10.1.1.1&quot;,</span> <span class="pre">as=&quot;12345&quot;</span></code>).</p></li>
<li><p>Функция <code class="docutils literal notranslate"><span class="pre">add_bgp_peer_stub</span></code> открывает спецификацию для протокола, реализующего RPC, и согласно ей упаковывает полученные параметры, которые станут payload’ом для сообщения. Такая упаковка называется <strong>маршалинг</strong>.</p></li>
<li><p>Далее формирует пакет и передаёт его вниз по стеку и - в сеть.</p></li>
<li><p>На другой стороне - на устройстве - приложение получает пакета.</p></li>
<li><p>Функция, принявшая сообщение, вытаскивает из него параметры процедуры, согласно той же самой спецификации и формирует список параметров. Это называется <strong>демаршалинг</strong>.</p></li>
<li><p>Приложение выполняет функцию - настраивает BGP-соседа 10.1.1.1 с AS 12345. Проверяет успешность выполнения.</p></li>
<li><p>Далее функция формирует на основе всё той же спецификации сообщение-ответ и передаёт его в ответном пакете.</p></li>
<li><p>Наша локальная сторона, с которой мы инициировали выполнение RPC, получает ответ, словно бы его вернула локальная функция.</p></li>
<li><p>Воаля</p></li>
</ol>
<p><a class="reference external" href="https://searchapparchitecture.techtarget.com/definition/Remote-Procedure-Call-RPC">Поподробнее про RPC</a><span class="link-target"> [https://searchapparchitecture.techtarget.com/definition/Remote-Procedure-Call-RPC]</span>.</p>
<div class="line-block">
<div class="line">В целом RPC - это концепция, не говорящая ничего о реализации.</div>
<div class="line">Она постулирует, что на стороне клиента есть так называемый стаб (stub) - фрагмент кода, который реализует взаимодействие по RPC. Именно стабы делают для разработчика прозрачным вызов функции - из приложения вызывается этот стаб с набором параметров, а уже стаб делает удалённый вызов.</div>
<div class="line">Ключевая часть RPC - спецификация - штука, которая на стороне сервера и клиента определяет, как работать с данными - как упаковать, как распаковать. Без участия человека, конечно же.</div>
<div class="line">Язык, на котором пишется спецификация - <strong>IDL</strong> - <em>Interface Definition Language</em>.</div>
<div class="line">Иными словами, на IDL пишется спецификация, на основе которой создаются и серверный интерфейс, и клиентский стаб. Это может быть, например, набор классов в питоне, имеющих функции для удалённого вызова, с которыми разработчик работает так, словно всё происходит локально - для клиента. И набор объектов Go - для сервера.</div>
</div>
<p>Мы дальше разберём два протокола, которые используются под капотом RPC и при этом позволяют управлять сетевым железом.</p>
<ul class="simple">
<li><p>NETCONF</p></li>
<li><p>gNMI (использующий gRPC)</p></li>
</ul>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>