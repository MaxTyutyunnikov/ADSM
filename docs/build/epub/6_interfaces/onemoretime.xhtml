<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Всё вместе</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="id1">
<h1>Всё вместе</h1>
<div class="line-block">
<div class="line">Ух, какую же большую кучу из разных технологий и идей мы свалили с начала статьи. Пора бы её разобрать и по коробкам разложить.</div>
<div class="line">Итак,</div>
</div>
<p><strong>Транспорт</strong></p>
<ul class="simple">
<li><p>SSH,</p></li>
<li><p>HTTP,</p></li>
<li><p>HTTP/2</p></li>
<li><p>SNMP тоже, конечно же, возможен, но не нужен.</p></li>
</ul>
<p><strong>Интерфейс</strong></p>
<ul class="simple">
<li><p>CLI</p></li>
<li><p>SNMP</p></li>
<li><p>NETCONF</p></li>
<li><p>RESTCONF</p></li>
<li><p>gRPC</p></li>
</ul>
<p><strong>Формат данных</strong></p>
<ul class="simple">
<li><p>Текст</p></li>
<li><p>XML</p></li>
<li><p>JSON</p></li>
<li><p>Protocol Buffers</p></li>
</ul>
<p><strong>Способ описания спецификации - он же может называться схемой</strong></p>
<ul class="simple">
<li><p>XSD</p></li>
<li><p>JSON schema</p></li>
<li><p>Protocol Buffers</p></li>
<li><p>MIB</p></li>
<li><p>Проприетарный способ, придуманный вендором и описанный в документации.</p></li>
</ul>
<p><strong>YANG-модели данных конфигурации</strong></p>
<ul class="simple">
<li><p>OpenConfig</p></li>
<li><p>Проприетарные модели</p></li>
<li><p>IETF</p></li>
<li><p>Проприетарная модель, придуманная вендором и неописанная в документации</p></li>
</ul>
<p><strong>Языки описания моделей</strong></p>
<ul>
<li><p>YANG</p></li>
<li><p>SMI/SMIng</p></li>
<li><p>Проприетарный язык, придуманный вендором и не описанный в документации</p>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/5/interfaces.png" src="https://fs.linkmeup.ru/images/adsm/5/interfaces.png" style="width: 800px;" />
</div>
</div></blockquote>
</li>
</ul>
<div class="section" id="id2">
<h2>И ещё другими словами</h2>
<ul class="simple">
<li><p><strong>YANG</strong> - язык моделирования данных, но не сами модели,</p></li>
<li><p><strong>YANG-модели</strong> - конкретные модели, написанные на языке YANG, но ещё не сами данные и не их схема,</p></li>
<li><p><strong>OpenConfig</strong> - вендор-независимая YANG-модель данных конфигурации сетевого оборудования,</p></li>
<li><p><strong>Native-модели</strong> - вендорские проприетарные YANG-модели данных сетевой конфигурации,</p></li>
<li><p><strong>XML, JSON, Protobuf</strong> - синтаксис по представлению структур данных в виде, пригодном для передачи (например, строка), иными словами - сериализация,</p></li>
<li><p><strong>XML-схемы (XSD), JSON-схемы, proto-спецификации</strong> - репрезентация YANG-модели в соответствующем формате, схема</p></li>
<li><p><strong>NETCONF</strong> - протокол взаимодействия с сетевым железом, работающий поверх SSH. В качестве формата данных использует XML. Структура XML может быть основана на YANG-модели, но не обязательно,</p></li>
<li><p><strong>RESTCONF</strong> - аналог NETCONF, но работающий через HTTP. Данные представляются в JSON или XML на основе какой-либо YANG-модели,</p></li>
<li><p><strong>gRPC</strong> - фреймворк для межсервисного взаимодействия, которые реализует интерфейс, протокол, формат данных и спецификации (protocol buffers). Непосредственно к сетям отношения не имеет,</p></li>
<li><p><strong>Protobuf</strong> - он же protocol buffers - спецификация для gRPC, а так же формат передачи данных в нём,</p></li>
<li><p><strong>gNMI</strong> - протокол на основе gRPC для взаимодействия с сетевым оборудованием. Всегда основан на модели, представленной в формате protobuf-спецификации, но это не обязательно должна быть YANG-модель.</p></li>
</ul>
<div class="line-block">
<div class="line">И чтобы окончательно разобраться в терминах, давайте разложим по полочкам: схема, спецификация, IDL.</div>
<div class="line"><strong>Схема</strong> - это широкий термин. Это то, что описывает, как данные должны быть представлены и чему соответствовать: структура, иерархия, типы итд.</div>
<div class="line">Думаю, что слова «схема» и «спецификация» мы можем считать синонимами.</div>
<div class="line">Для каждого формата данных будет так же и свой формат написания схем.</div>
<div class="line">Для XML - это XSD, для JSON - JSON-schema, для gRPC - protobuf.</div>
<div class="line">А уже конкретный файл/текст, описывающий какие-либо данные - это и будет сама схема.</div>
</div>
<div class="line-block">
<div class="line">Соответственно данные можно провалидировать по схеме - убедиться, соответствуют ли они ей.</div>
<div class="line">Из схемы/спецификации можно создать объекты языка программировани, чтобы было удобнее работать с ними.</div>
<div class="line">То есть из XML-схемы создаём классы, например, питона, работаем с ними привычным образом, далее преобразуем в XML, который можно уже проверить на соответствие изначальной схеме. Или данные, полученные из какой-то внешней системы, можно проверить на такое соответствие, прежде чем начинать обрабатывать.</div>
</div>
<div class="line-block">
<div class="line"><strong>IDL</strong> - его назначение прямо следует из названия - язык определения интерфейса. Если схема описывает как данные выглядят вообще, то IDL определяет, как две системы должнц представлять данные, чтобы взаимодействовать друг с другом. То есть это уже контракт между ними, а схема - это инструмент, позволяющий этого добиться.</div>
<div class="line">Таким образов в gRPC protobuf является и IDL и способом описания спецификацией. В случае NETCONF формат данных - это XML, способ описания спецификации - это XSD, а в качестве IDL выступает сам NETCONF - ведь именно он и определяет интерфейс.</div>
</div>
<p><strong>Модель</strong> же определяет то, как будет выглядеть сама спецификация/схема. То есть это ещё более абстрактная конструкция. И нужна модель для того, чтобы на её основе была возможность создать как proto-спеку, так и JSON-схему, так и XSD.</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>