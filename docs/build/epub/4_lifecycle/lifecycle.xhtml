<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Общий взгляд на жизненный цикл оборудования</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="id1">
<h1>Общий взгляд на жизненный цикл оборудования</h1>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/4/life_cycle.png" src="https://fs.linkmeup.ru/images/adsm/4/life_cycle.png" style="width: 800px;" />
</div>
</div></blockquote>
<p>Вот мы купили сетевую железку. Что теперь? Проследим её жизнь с первого и до последнего дня.</p>
<ol class="arabic">
<li><div class="line-block">
<div class="line"><strong>Day 0</strong> - железка только появилась в наших руках. Сейчас самое важное - базовая настройка:</div>
</div>
<blockquote>
<div><ul class="simple">
<li><p>Добавить IP-адрес управления и маршрут</p></li>
<li><p>Включить SSH</p></li>
<li><p>Создать пользователя с правами настройки</p></li>
</ul>
</div></blockquote>
<div class="line-block">
<div class="line">Иными словами задача Day0 конфигурации - организовать доступ на устройство.</div>
</div>
</li>
<li><div class="line-block">
<div class="line"><strong>Day 1</strong> - Железка уже встала на позицию, определена его роль в сети и сервисы, которые она обслуживает.</div>
<div class="line">Теперь нужно настроить уже целевую конфигурацию, с которой устройство встанет в сеть под нагрузку.</div>
</div>
</li>
<li><p><strong>Day N</strong> - Изменения конфигурации в процессе эксплуатации.
| Бывает мы добавляем новый сервис, пересматриваем дизайн или на худой конец нужно ACL поправить.
| Такие изменения нужно тоже уметь довозить до устройства.</p></li>
<li><p><strong>Обслуживание</strong> - Помимо нормальной работы есть периоды, когда устройство нужно аккуратно вывести из под нагрузки, чтобы, например, поменять в нём плату, провести обновление ПО.</p></li>
<li><p><strong>Отслеживание изменений</strong> - со всей сети следует собирать информацию о том, где и во сколько применялась новая конфигурация. Это позволит как скоррелировать жалобы клиентов с изменениями, так и знать, когда применялась новая конфигурация в обход процедуры.</p></li>
<li><p>Проверка соответствия эталонной конфигурации** - В течение всей жизни устройства нужно проверять, что его конфигурация не разошлась с целевой из-за сбоев в автоматике, обновлений ПО или прямого вмешательства чьих-то рук.</p></li>
<li><p><strong>Бэкапы</strong> - Даже если мы в любой момент можем сгенерировать эталонную конфигурацию, чтобы применить её на устройство, бэкапы необходимы.</p></li>
<li><p><strong>The Last Day</strong> - снятие нагрузки, удаление из всех систем, ритуальное сжигание. Под сжиганием я понимаю безопасную затирку конфигурации, чтобы хэши паролей (или, упаси Лейбниц, клиртекст), префикс-листы и ACL’и не оказались достоянием общественности.</p></li>
</ol>
<p>Я намеренно обхожу вниманием в этой статье вопрос мониторингов операционного состояния и реакции на них, поскольку её лейтмотив - это всё же конфигурация.</p>
<p>Далее обсудим Day0 - DayN более детально.</p>
<div class="section" id="day0">
<h2>Day0</h2>
<p>Итак, поставщик привёз на склад новый свитч. Его нужно установить, настроить, проверить, запустить трафик, добавить во все системы: инвентарные, мониторинги, бэкапы, скрипты автоматизации всякой рутины.</p>
<p>Задачи Day 0 можно грубо разделить на две части:</p>
<ul class="simple">
<li><p>Завести устройство в системах</p></li>
<li><p>Настроить базовый доступ</p></li>
</ul>
<p>Говорить про них в отрыве друг от друга сложно, и делать мы так не будем.</p>
<p>Какие же есть способы?</p>
<ol class="arabic">
<li><div class="line-block">
<div class="line"><strong>Бумер</strong>  - вручную завести устройство в инвентарной системе и выделить свободный IP-адрес. Пусть это будет даже экселька.</div>
<div class="line">Подключить свитч к компьютеру и через консольный порт настроить IP-адрес, маршрут, включить SSH, создать пользователя.</div>
<div class="line">Отвезти свитч на позицию.</div>
</div>
<blockquote>
<div><div class="line-block">
<div class="line"><strong>+</strong> Просто, не требует почти никакой инфраструктуры.</div>
<div class="line"><strong>-</strong> Склонно к ошибками, масштабируется человеко-часами.</div>
</div>
</div></blockquote>
</li>
<li><div class="line-block">
<div class="line"><strong>Бумер+</strong> - автоматизируем заведение устройства в DCIM/IPAM. Мы только нажимаем кнопочку, а в системе появляется железка на правильной локации со всеми нужными портами, ей выделяется автоматически имя и следующий свободный IP-адрес. В итоге генерируется базовый конфиг в виде текстового файлика.</div>
<div class="line">Администратор подключает свитч к компьютеру и через консольный порт копипастит содержимое этого файлика в терминал.</div>
</div>
<blockquote>
<div><div class="line-block">
<div class="line"><strong>+</strong> Ниже вероятность ошибок, значительно меньше ручной работы</div>
<div class="line"><strong>-</strong> Требуется уже какая-никакая инфраструктура: IPAM/DCIM с API, скрипт, всё ещё ручная работа, всё ещё настраивать на стенде и потом везти устройство на позицию.</div>
</div>
</div></blockquote>
</li>
<li><div class="line-block">
<div class="line"><strong>Миллениал</strong> -  ZTP - Zero Touch Provisioning - подход, которому 100 лет в обед, но он почему-то всё ещё есть не везде. Идея в том, что устройство сразу же ставится на позицию и подключается в сеть управления, после чего по DHCP оно само получает свою конфигурацию.</div>
<div class="line">Для этого устройство должно быть уже заведено в IPAM/DCIM и предгенерирована конфигурация, которая и передаётся устройству.</div>
</div>
<blockquote>
<div><div class="line-block">
<div class="line"><strong>+</strong> Устройство можно сразу везти на позицию, минимум ручного труда</div>
<div class="line"><strong>-</strong> Нужна уже продуманная связная инфраструктура: IPAM/DCIM, DHCP, (T)FTP, автогенерация конфигов. Классическую вендорскую реализацию сложно применить для распределённых сетей, вроде ритейла.</div>
</div>
</div></blockquote>
</li>
<li><div class="line-block">
<div class="line"><strong>Зумеры</strong> - SD-WAN. Кстати, как раз подходит для ритейлов, хотя в свою очередь не очень для датацентров. Подход разделяет идею ZTP - мы устройство включаем, а оно само настраивается.</div>
</div>
<blockquote>
<div><div class="line-block">
<div class="line"><strong>+</strong> Меньше вероятность ошибок. На первый взгляд меньше работы</div>
<div class="line"><strong>-</strong> Однако SD-WAN - это преимущественно проприетарные решения вендоров, требующие мощной инфраструктуры, причём иногда только в облаке вендора. У нас, кстати, был целый подкаст про SD-WAN: <a class="reference external" href="https://linkmeup.ru/blog/588.html">telecom №91. SD-WAN</a><span class="link-target"> [https://linkmeup.ru/blog/588.html]</span>.</div>
</div>
</div></blockquote>
</li>
<li><div class="line-block">
<div class="line"><strong>Пост-хипстеры</strong> - есть компании, где помимо Out of Band сети управления, есть ещё консольное соединение до абсолютно каждой железки. Для этого есть соответственно сеть консольных серверов внутри датацентров и точек присутствия.</div>
<div class="line">Каждое новое устройство после установки подключается отдельно в OOB-свитч по Ethernet и в консольный сервер консольным линком.</div>
<div class="line">Это позволяет реализовать схему, подобную описанной ниже:</div>
</div>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>Устройство добавляется в IPAM/DCIM</p></li>
<li><p>Устройство устанавливается и подключается по управлению</p></li>
<li><p>Инженер в ДЦ создаёт задачу на сервер наливки: настроить свитч за консольными сервером №7, порт 3</p></li>
<li><p>Сервер наливки подключается на указанный порт, забирает серийный номер, с которым идёт в IPAM, генерирует базовый конфиг и обратно через тот же консольный порт применяет данную конфигурацию</p></li>
</ul>
</div></blockquote>
<div class="line-block">
<div class="line"><strong>+</strong> Всегда есть консольный доступ на устройство, какие бы шторма ни гуляли в сети трафика и управления. Нет проблем с вендорскими особенностями - консольный протокол у всех реализован одинаково (с поправкой на параметры порта)</div>
<div class="line"><strong>-</strong> Совсем непросто и в абсолютных цифрах недёшево реализовывать ещё одну сеть управления. Не подходит для географически распределённых сетей. Требуется серьёзная инфраструктура даже в минимальном варианте без использования сервера наливки.</div>
</div>
</div></blockquote>
</li>
</ol>
<div class="line-block">
<div class="line">Как видите, любые решения по автоматизации Day 0 требуют чего-то больше, чем просто скриптик на питоне. К этому процессу нужно подходить системно с точки зрения выстраивания инфраструктуры.</div>
<div class="line">Кстати, вот классный доклад от фейсбука про их Вендинговые Машины по выдаче новых локаций: <a class="reference external" href="https://www.youtube.com/watch?v=ErmhE_wmNo0">Scaling the Facebook backbone through Zero Touch Provisioning (ZTP)</a><span class="link-target"> [https://www.youtube.com/watch?v=ErmhE_wmNo0]</span></div>
</div>
<p>Так или иначе эта часть автоматизирована у многих, потому что подходы понятны, инструменты в ассортименте.</p>
</div>
<div class="section" id="day-1">
<h2>Day 1</h2>
<div class="line-block">
<div class="line">Дальше на железку нужно накатить уже рабочую конфигурацию и пустить на неё нагрузку.</div>
<div class="line">Тут уже заметно интереснее. Одно дело - сгенерировать простейший конфиг на 20 строчек, одинаковый для всех типов устройств, как было в Day 0, и совсем другое - целевой конфиг на пару тысяч строк, который может радикально отличаться от железки к железке в зависимости от её роли и необходимых сервисов. Например, конфигурации двух экземпляров одной и той же модели свитча, установленных в качестве лифа и спайна, будут различаться как минимум настройками даунлинк интерфейсов.</div>
<div class="line">Основная идея здесь в том, что мы описываем дизайн сети в том или ином формальном виде и отдаём его генераторам. Генераторы берут этот дизайн, роль устройства, локацию, переменные из IPAM/DCIM, всё это перемешивают, а на выходе получается специфический для данной коробки конфиг.</div>
<div class="line">То есть основных компонента здесь три:</div>
</div>
<ul class="simple">
<li><p>Формализованный дизайн</p></li>
<li><p>Заполненные данные в IPAM/DCIM</p></li>
<li><p>Набор генераторов</p></li>
</ul>
<div class="line-block">
<div class="line">Здесь подробно останавливаться не будем - формализации дизайна я посвящу отдельный (и скорее всего не один) выпуск.</div>
</div>
<div class="line-block">
<div class="line">Итак, имеем конфиг Day1. Осталось всего ничего - применить его на железку.</div>
<div class="line">И тут все средства хороши в разных комбинациях: консоль, SSH, netmiko, NETCONF, GNMI, REST API, SNMP (я сейчас не шучу - лично видел), FTP, SCP.</div>
<div class="line">В целом на нерабочую пока железку применить конфиг действительно можно разными способами:</div>
</div>
<ul class="simple">
<li><p>Ручной копипаст из файлика в терминал</p></li>
<li><p>Применение команд последовательно через SSH из кода, используя тот же netmiko</p></li>
<li><p>Копирование файла на флэшку устройства, установка его в качестве конфигурационного и ребут железки</p></li>
<li><p>А-ля config replace</p></li>
<li><p>Пульнуть через NETCONF весь конфиг в XML</p></li>
<li><p>gNMI</p></li>
</ul>
<p>Об этом тоже ещё поговорим.</p>
<p>С автоматизацией этой задачи большинство тоже справляются - один раз настроить железку без нагрузки - дело нехитрое.</p>
<p>Замечу, что если есть процесс и инструменты Configuration Management и версионирования конфигурации, то Day1  - это лишь частный случай DayN.</p>
</div>
<div class="section" id="day-n">
<h2>Day N</h2>
<div class="line-block">
<div class="line">И вот теперь - ежедневная эксплуатация и периодические реконфигурации.</div>
<div class="line">А вот с этим дела обстоят туго чуть менее, чем у всех. Говоря это, я не шучу. Тут всё плохо.</div>
<div class="line">Дело в том, что нагенерить конфигурацию - действительно несложно. Пусть это будет даже циклопический jinja-шаблон с циклами и каунтерами.</div>
</div>
<p>А вот применить этот конфиг на железку ещё и под продуктивной нагрузкой - цель для инженеров со стальными нервами.</p>
<p>Тут целый ком проблем, как очевидных, так и неявных.</p>
<div class="line-block">
<div class="line"><strong>Во-первых</strong>, интерфейс: CLI, NETCONF, GNMI, SCP/FTP.</div>
<div class="line">Если CLI - то как быть с особенностями реализации каждого вендора? Режимы контекстов, интерактивные диалоги, порядок выполнения команд.</div>
<div class="line">Если NETCONF или gNMI - то его не все вендоры поддерживают. А те, кто поддерживает, делают это сильно по-разному, и зачастую не в полной мере. А если в полной мере, то, конечно, же в своей схеме, а не в OpenConfig.</div>
<div class="line">А если файлик подложить - то не все на лету умеют заменять, а значит с ребутом - только кому он нужен при добавлении BGP-пира?</div>
</div>
<p><strong>Во-вторых</strong>, инструмент доставки: netmiko, ncclient, ansible (какой модуль), SaltStack?</p>
<p><strong>В-третьих</strong>, как заливать вслепую? Отправляя полную конфигурацию, мы не знаем, как она изменит состояние устройства. Даже если мы видим дифф между файлами или в ветке в гите, это не говорит о том, какие команды фактически применятся на железке.</p>
<p><strong>В-четвёртых</strong>, даже если мы видим будущие изменения (кандидат-конфиг на самом устройстве, к примеру), то это не говорит о том, что мы ничего не разломаем по своей неосмотрительности. Тут уже напрашивается сетевой CI/CD.</p>
<p><strong>В-пятых</strong>, весь ворох вопросов мультивендорной взрослой сети: разный синтаксис, семантика даже между версиями софта, где-то есть коммиты, где-то нет, где-то можно увидеть кандидат, где-то нет.</p>
<p>Это область компромиссов.</p>
<div class="line-block">
<div class="line">Но давайте будем честны сами с собой: восьми компаниям из десяти не нужен выстроенный процесс версионирования конфигурации, конвейер CI/CD, автоматическая выкатка, а возможно, и вообще весь этот ваш DevOps в сети.</div>
<div class="line">Скорее всего, вам действительно достаточно залить первичный конфиг, а дальше изменения накатывать всю жизнь элементарными плейбуками, составленными вручную. И для этого, включая мониторинги и внутренние инструменты, достаточно 2-5 человек, а не целый штат разработчиков.</div>
<div class="line">И большинство компаний именно так и делает.</div>
<div class="line">Можно добавить GitLab, TeamCity, AWX, аппаратную лабораторию с набором специфических тестов (FIB, QoS). Это всё мощные улучшайзеры, которые сделают процесс выкатки новой конфигурации значительно безопаснее. Но они не переведут управление конфигурацией на принципиально новый уровень.</div>
</div>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/4/deploy.gif" src="https://fs.linkmeup.ru/images/adsm/4/deploy.gif" style="width: 300px;" />
</div>
</div></blockquote>
<p>А мы ведь всё же хотим</p>
<ul class="simple">
<li><p>Полную автоматизацию</p></li>
<li><p>Универсальное решение</p></li>
<li><p>Минимизацию рутины</p></li>
<li><p>Безопасные выкатки конфигурации</p></li>
<li><p>Формализованный дизайн</p></li>
<li><p>Версионирование</p></li>
<li><p>Транзакционность, а если быть точнее, то соответствие требованиям ACID</p></li>
</ul>
<p>Поэтому давайте составим схему системы автоматизации, которая позволит нам решить все задачи.
Но прежде расширим понятие «Инфраструктура как код» на сетевую инфраструктуру.</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>