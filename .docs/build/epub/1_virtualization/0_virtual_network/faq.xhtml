<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>FAQ</title>
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="faq">
<h1>FAQ</h1>
<p><strong>Зачем ты всё время делаешь ремарку GRE/UDP?</strong></p>
<div class="line-block">
<div class="line">Ну, вообще, это, можно сказать, специфично для Tungsten Fabric - можно вообще не брать во-внимание.</div>
<div class="line">Но если брать, то сам TF, ещё будучи OpenContrail’ом поддерживал обе инкапсуляции: MPLS in GRE и MPLS in UDP.</div>
<div class="line">UDP хорош тем, что в Source Port в его заголовке очень легко закодировать хэш-функцию от изначальных IP+Proto+Port, что позволит делать балансировку.</div>
<div class="line">В случае GRE, увы, есть только внешние заголовки IP и GRE, которые одинаковы для всего инкапсулированного трафика и речь о балансировке не идёт - мало кто может заглянуть так глубоко внутрь пакета.</div>
</div>
<p>До некоторого времени маршрутизаторы, если и умели в динамические туннели, то только в MPLSoGRE, и только совсем недавно, научились в MPLSoUDP. Поэтому приходится делать всегда ремарку о возможности двух разных инкапсуляций.</p>
<p>Справедливости ради, стоит отметить, что TF вполне поддерживает и L2-связность с помощью VXLAN.</p>
<p><strong>Ты обещал провести параллели с OpenFlow.</strong></p>
<div class="line-block">
<div class="line">Они и правда напрашиваются. vSwitch в том же OpenStack’е делает весьма похожие вещи, используя VXLAN, у которого, кстати, тоже UDP-заголовок.</div>
<div class="line">В Data Plane они работают примерно одинаково, существенно различается Control Plane. Tungsten Fabric использует XMPP для доставки информации о маршрутах на vRouter, в то время, как в OpenStack’е работает Openflow.</div>
</div>
<p><strong>А можно чуть больше про vRouter?</strong></p>
<div class="line-block">
<div class="line">Он делится на две части: vRouter Agent и vRouter Forwarder.</div>
<div class="line">Первый запускается в User Space хостовой ОС и общается с SDN-контроллером, обмениваясь информацией о маршрутах, VRF и ACL.</div>
<div class="line">Второй реализует Data Plane - обычно в Kernel Space, но может запускаться и на SmartNIC’ах - сетевых картах с CPU и отдельным программируемым чипом коммутации, что позволяет снять нагрузку с CPU хостовой машины, а сеть сделать быстрее и более предсказуемой.</div>
<div class="line">Ещё возможен сценарий, когда vRouter - это DPDK-приложение в User Space.</div>
</div>
<p>vRouter Agent спускает настройки на vRouter Forwarder.</p>
<p><strong>Что за Virtual Network?</strong></p>
<div class="line-block">
<div class="line">Я обмолвился в начале статьи о VRF, что мол каждый тенант привязывается к своему VRF. И если для поверхностного понимания работы оверлейной сети этого было достаточно, то уже на следующей итерации надо делать уточнения.</div>
<div class="line">Обычно в механизмах виртуализации сущность Virtual Network (можно считать это именем собственным) вводится отдельно от клиентов/тенантов/виртуальных машин - вполне себе самостоятельная вещь. А этот Virtual Network через интерфейсы уже можно подключить в один тенант, в другой, в два, да хоть куда. Так, например, реализуется Service Chaining, когда трафик нужно пропустить через определённые ноды в нужной последовательности, просто в правильной последовательности создавая и привзявая Virtual Network’и.</div>
<div class="line">Поэтому как такового прямого соответствия между Virtual Network и тенантом нет.</div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>