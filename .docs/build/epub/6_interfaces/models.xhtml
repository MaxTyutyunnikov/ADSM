<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Модели данных</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="id1">
<h1>Модели данных</h1>
<div class="line-block">
<div class="line">Обратили, кстати, внимание, что в примерах выше в вызовах не было ничего специфичного для вендора?</div>
<div class="line">На самом деле некая неявная привязка есть - это пути, они могли бы отличаться для Аристы и Хуавэя. Но внимание на слово «openconfig» в этих путях. Что это? Что за Открытый конфиг?</div>
</div>
<div class="line-block">
<div class="line">Сложность с автоматизацией сети - она ведь в чём? В том, что прежде чем отправлять конфигурацию на устройство, человек должен сесть и прям-таки разобраться в структуре CLI или XML и руками накидать шаблоны для конфигурации.</div>
<div class="line">Даже просто для того, чтобы настроить IP-адрес на интерфейсе, нужно знать иерархию секций конфигурации или конкретное поддерево XML.</div>
</div>
<div class="line-block">
<div class="line">А ещё выяснить, в каком формате надо передавать адрес: <code class="docutils literal notranslate"><span class="pre">fe80::1/64</span></code>, <code class="docutils literal notranslate"><span class="pre">fe80::1</span> <span class="pre">64</span></code>, <code class="docutils literal notranslate"><span class="pre">fe80::1</span> <span class="pre">link-local</span></code>, <code class="docutils literal notranslate"><span class="pre">address:</span> <span class="pre">fe80::1,</span> <span class="pre">mask:</span> <span class="pre">64</span></code>, <code class="docutils literal notranslate"><span class="pre">FE8:0:0:0:0:0:0:1</span></code>, <code class="docutils literal notranslate"><span class="pre">0000111111101000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000000</span> <span class="pre">0000000000000001</span></code> или там вообще не поддерживается IPv6. И надо ли сначала как-то энейблить IPv6, а MTU заимствуется с интерфейса или для IPv6 отдельный?</div>
<div class="line">И так для каждого вендора по отдельности. Знаете, сетевых автоматизаторов спасает только то, что они до этого лет 10 ели на завтрак циски да джуниперы - и как свои два пальца знают все тонкости CLI.</div>
<div class="line">Оно же их и губит.</div>
</div>
<p>NETCONF поел овса из-за того, что не предложил никакой стандартизации для моделирования данных. Именно поэтому вендоры успели наплодить своих собственных, несовместимых моделей, про которые мы и поговорим ниже.</p>
<p>Собственно то, в какой иерархии представлена конфигурация - и есть модель данных. Говорится об этом или нет, но такая модель есть всегда и у любого интерфейса. Она может быть плоской или иерархической, может быть простой или запутанной. Если бы её не было, то вы бы просто не смогли настроить устройство, а команды конфигурации могли бы видоизвиняться случайным образом. Говорят, в Router OS 7 подвезли такую функцию.</p>
<div class="line-block">
<div class="line">Так, мы знаем, что например, в случае Juniper нужно войти в контекст <code class="docutils literal notranslate"><span class="pre">system-&gt;login</span></code>, чтобы настроить нового пользователя, а формат команды будет <code class="docutils literal notranslate"><span class="pre">set</span> <span class="pre">&lt;USERNAME&gt;</span> <span class="pre">&lt;OTHER</span> <span class="pre">PARAMETERS&gt;</span></code>.</div>
<div class="line">А настройка IP-адреса управления при этом будет происходить в контексте <code class="docutils literal notranslate"><span class="pre">interface</span> <span class="pre">-&gt;</span> <span class="pre">em0</span> <span class="pre">-&gt;</span> <span class="pre">unit</span> <span class="pre">0</span> <span class="pre">-&gt;</span> <span class="pre">family</span> <span class="pre">inet</span></code>. И так будет всегда. Во всяком случае на этой железке и этой версии софта.</div>
</div>
<p>То есть модель данных - это контракт между пользователем и операционной системой - как она интерпретирует переданные команды в зависимости от контекста.</p>
<p>Это верно для CLI, SNMP, NETCONF, gNMI и даже прямых вызовов чипового SDK.</p>
<div class="line-block">
<div class="line">Просто бОльшую часть истории нам не нужно было знать об этих моделях. Есть аксиома - у каждого вендора она своя. А мы в голове, сознательно или нет, её выстраивали, воссоздавали.</div>
<div class="line">И вендор может менять эту модель по своему усмотрению от версии к версии. А мы как люди к этому адаптируем свою внутреннюю модель, приспосабливаемся - по законам эволюции.</div>
</div>
<div class="section" id="native">
<h2>Native</h2>
<p>Так было всегда, но это поменялось с приходом автоматизации. Вендоры, как будто бы думали, что рост сетей можно поддерживать постоянным докидыванием людей на их настройку. Но людям это не нравилось, они начали писать инструменты автоматизации на perl’ах, php, python’ах с expect’ами, попытками отловить все возможные ответы CLI, правильно на них среагировать. Но количество скорби в этом мире только множилось. Все рано или поздно приходили к пониманию, что долго притворяться робот человеком не может.</p>
<div class="line-block">
<div class="line">Так и появились NETCONF и RESTCONF (так появлялся и SNMP). Они дали возможность работать со структурированными данными, а также создавать более явные контракты между клиентом и сервером.</div>
<div class="line">Автор утилиты/библиотеки, опираясь на этот контракт, пишет код, а вендор обязуется принять данные, которые ему прислали. Если вы присылаете соответствующие контракту данные, а вендор говорит, что вы ерунду прислали, вы идёте в суд (в TAC).</div>
</div>
<div class="line-block">
<div class="line">Первые реализации NETCONF были настолько же закрытыми, как и сам CLI. У джуна - меньше, у циски - больше. У кого-то RPC перекладывались собственно в вызове CLI.</div>
<div class="line">Но необходимость приводить это всё к каким-то явным схемам становилась всё очевиднее с каждым днём. К этому же подталкивал и расцвет NMS, берущих на вооружение NETCONF.</div>
</div>
<p>И так появились первые модели данных - NATIVE. У каждого вендора своя, но уже модель, и уже открытая.
Вендоры с достаточно высокой социальной ответственностью выкладывают свои модели в <a class="reference external" href="https://github.com/YangModels/yang/tree/master/vendor">публичный репозиторий</a><span class="link-target"> [https://github.com/YangModels/yang/tree/master/vendor]</span>.</p>
<div class="line-block">
<div class="line">Наличие модели позволяет уже как минимум не рыскать в попытках вслепую нащупать, как составить XML, а пойти, посмотреть, в каком виде ожидает данные коробка.</div>
<div class="line">А при желании модель читать программно и руками даже ничего не делать.</div>
</div>
</div>
<div class="section" id="id3">
<h2>Вендор-нейтральные модели</h2>
<div class="line-block">
<div class="line">С этим уже можно было жить.</div>
<div class="line">Инженерам нужно было чуть меньше думать об интерфейсах и форматах сообщений, но с глубоким вниманием подходить к содержимому сообщений всё ещё приходилось, оказывая разные знаки почтения разным вендорам.</div>
</div>
<div class="line-block">
<div class="line">При этом казалось бы - вся сеть - это конечный набор одинаковых сервисов, если выбросить всякие IGRP, HSRP, RRPP и прочие проприетарные выдумки. Ну, всем же нужен IP, OSPF, BGP? Всем нужна аутентификация на устройствах и SSH? Они не могут иметь очень уж принципиальные отличия, как минимум из-за необходимости поддерживать совместимость друг с другом и соответствия RFC.</div>
<div class="line">Так почему мы делаем это сотней разных способов?</div>
</div>
<blockquote>
<div><p><strong>Настройка интерфейса</strong>:</p>
<p>Juniper:</p>
<blockquote>
<div><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>configure
set interfaces ge-0/0/0 unit 0 family inet address 10.0.0.1/30
commit and-quit
</pre></div>
</div>
</div></blockquote>
<dl>
<dt>Nokia:</dt><dd><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>router
interface &quot;test&quot;
address 10.0.0.1
port 1/1/1
no shutdown
exit
</pre></div>
</div>
</dd>
<dt>Cisco:</dt><dd><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>conf t
interface gigabitethernet1
ip address 10.0.0.1 255.255.255.252
no shut
exit
</pre></div>
</div>
</dd>
</dl>
<p><strong>Настройка BGP</strong>:</p>
<p>Juniper:</p>
<blockquote>
<div><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>configure
set routing-options router-id 10.0.0.1
set routing-options autonomous-system 65000
set protocols bgp group test type internal
set protocols bgp group test peer-as 65000
set protocols bgp group test neighbor 10.0.0.2 redistribute-connected
set policy-options policy-statement redistribute-connected from protocol direct
set policy-options policy-statement redistribute-connected then accept
commit and-quit
</pre></div>
</div>
</div></blockquote>
<dl>
<dt>Nokia:</dt><dd><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>router
autonomous-system 6500
router-id 10.0.0.1
bgp group &quot;ibgp&quot;
 type internal
 neighbor 10.10.10.2
exit
</pre></div>
</div>
</dd>
<dt>Cisco:</dt><dd><div class="highlight-text notranslate"><div class="highlight"><pre><span></span>conf t
router bgp 65000
 bgp router-id 10.0.0.1
 neighbor 10.0.0.2 remote-as 65000
 redistribute connected
exit
</pre></div>
</div>
</dd>
</dl>
</div></blockquote>
<p>Сложность ведь не в транспорте и не в интерфейсе, а в модели данных. Сделать у каждого вендора Configuration State Management - одноразовая решаемая (а много где и решённая) задача. А вот договориться между всеми производителями, как должна выглядеть модель - так же сложно, как и любая другая задача, где людям нужно договориться.</p>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/5/dontlookup.jpeg" src="https://fs.linkmeup.ru/images/adsm/5/dontlookup.jpeg" style="width: 800px;" />
</div>
</div></blockquote>
<p>Но ни один из зарождавшихся и выживших стандартов или не ставил целью унификацию вообще, или пытался поднять этот вопрос, но был выброшен в окно штаб-квартиры вендора.</p>
<p>Хотя вру. IETF предприняли отчасти успешную попытку написать универсальную модель.</p>
<div class="section" id="ietf">
<h3>IETF-модель</h3>
<div class="line-block">
<div class="line">Ещё в 2014-м году были сделаны <a class="reference external" href="https://github.com/YangModels/yang/tree/main/standard/ietf/RFC">первые коммиты</a><span class="link-target"> [https://github.com/YangModels/yang/tree/main/standard/ietf/RFC]</span> в её репозиторий.</div>
<div class="line">С тех пор много накоммичено, но мало фактически сделано. Общепризнанно, что IETF -модель очень медленно развивается, у неё низкое покрытие, а архитектура - так себе.</div>
<div class="line">С IETF-модели рекомендуют начинать, потому что она якобы проще, а уже потом переходить на OpenConfig, но как по мне - это напрасная трата времени.</div>
<div class="line">Она мертворождённая и никому особо не нужна. Хотя вендоры поддерживают.</div>
<div class="line">Заказчиков и пользователей беспокоила обрезанность модели и инертность IETF.</div>
<div class="line">Но один в поле не воин - тысячи разрозненных автоматизаторов по всему миру не могли ничего с этим сделать. А вот большие компании могли.</div>
<div class="line">Когда надо настроить тысячу свитчей, а каждый месяц запускать новый датацентр, когда на сети 5 разных поколений дизайна, а катить изменения нужно дважды в день, начинаешь несколько иначе смотреть на все этим ваши сиэлаи и вендор-специфичные эксэмали.</div>
</div>
<p>Так гугл придумал OpenConfig. Он не стал размениваться на IETF-модели и торги со стариканами из института.</p>
</div>
<div class="section" id="openconfig">
<h3>OpenConfig - мечта, становящаяся явью</h3>
<p>Возможно, впервые за шестидесятилетнюю историю телекоммуникаций у нас появился шанс изобрести свой USB Type C. Представьте мир, в котором Cisco, Juniper, Arista и Mikrotik настраиваются одними и теми же командами и это к тому же приводит к одинаковому результату?</p>
<p>Я не могу.</p>
<p>OpenConfig - это открытая YANG-модель, которая предполагается единой для всех вендоров. Одна стандартизированная модель для управления конфигурацией, сбора операционных данных с устройства и телеметрии. Одна для всех поддерживающих OC вендоров.</p>
<p>Итак, OpenConfig появился в 2015 году в Google как ответ на следующие вызовы:</p>
<ul class="simple">
<li><p>20+ ролей сетевых устройств</p></li>
<li><p>Больше полудюжины вендоров</p></li>
<li><p>Множество платформ</p></li>
<li><p>4M строк в конфигурационных файлах</p></li>
<li><p>30K изменений конфигураций в месяц</p></li>
<li><p>Больше 8M OIDs опрашиваются каждые 5 минут</p></li>
<li><p>Больше 20K CLI-команд выполняется каждые 5 минут</p></li>
<li><p>Множество инструментов и поколений софта, куча скриптов</p></li>
<li><p>Отсутствие абстракций и проприетарные CLI</p></li>
<li><p>SNMP не был рассчитан на столь большое количество устройств и на столько большие объёмы данных (RIB)</p></li>
</ul>
<div class="line-block">
<div class="line">Как работать с openconfig мы уже немного попрактиковались выше.</div>
<div class="line">Полезным было бы взглянуть на структуру этой модели. Но это мы сделаем в следующей главе про YANG.</div>
</div>
<p>OpenConfig сегодня даёт возможность настройки базовых сервисов. Безусловно речь не идёт про вещи, завязанные на аппаратные особенности: QoS, управление буферами и ресурсами чипа, сплиты портов, работа с трансиверами. И в каком-то хоть сколько-то обозримом будущем этого ждать не стоит.</p>
<p>Хуже того, на сегодняшний день многие вендоры, ввязавшиеся в поддержку OC, не реализуют все 100%, а лишь часть.</p>
<p>Но BGP с OSPF настроить точно можно.</p>
<p><strong>Что делать в этом случае?</strong></p>
<div class="line-block">
<div class="line">И есть два пути.</div>
<div class="line">Один из них - брать OC и видоизменять его с помощью добавления или убирания каких-либо его частей.</div>
<div class="line">Когда вендор хочет расширить покрытие модели - он делает augmentation, встраивая его в нужное место.</div>
<div class="line">Если он хочет поменять какое-то поведение или удалить функциональность - он описывает deviation к базовой модели.</div>
<div class="line">Этот способ, конечно, не покрывает все потребности.</div>
</div>
<p>Другой - использовать вендорские Native модели, покрытие которых намного больше.</p>
<p>Абсолютно нормально совмещать OC и Native - главное, не настраивать одно и то же с помощью разных моделей.
В целом рекомендуют (даже сами вендоры), использовать OC там, где это возможно, а где нет - прибегать к native.</p>
<blockquote>
<div><div class="figure align-center">
<img alt="https://fs.linkmeup.ru/images/adsm/5/open-vs-native.png" src="https://fs.linkmeup.ru/images/adsm/5/open-vs-native.png" style="width: 800px;" />
</div>
<p>Источник: <a class="reference external" href="https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKDEV-1368.pdf">доклад на Cisco Live</a><span class="link-target"> [https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKDEV-1368.pdf]</span></p>
</div></blockquote>
<div class="line-block">
<div class="line">Google привёл в наш мир OpenConfig в одной руке, а gNMI - в другой.</div>
<div class="line">Но в качестве транспорта для OC может быть как gNMI, так и NETCONF и RESTCONF - это не принципиально. В то же время, для gNMI OpenConfig в частности и YANG вообще не единственные возможные модели и языки.</div>
</div>
<p>Так что же это за мифический YANG?</p>
</div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>